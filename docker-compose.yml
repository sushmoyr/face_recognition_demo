version: '3.8'

services:
  postgres:
    image: pgvector/pgvector:pg15
    container_name: attendance-postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-attendance_db}
      POSTGRES_USER: ${DB_USER:-attendance_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-attendance_pass}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/src/main/resources/db/init:/docker-entrypoint-initdb.d
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-attendance_user} -d ${DB_NAME:-attendance_db}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - attendance-network

  minio:
    image: minio/minio:latest
    container_name: attendance-minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin123}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/ready"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 30s
    networks:
      - attendance-network

  createbuckets:
    image: minio/mc:latest
    container_name: attendance-createbuckets
    depends_on:
      minio:
        condition: service_healthy
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin123}
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio http://minio:9000 $${MINIO_ROOT_USER} $${MINIO_ROOT_PASSWORD};
      /usr/bin/mc mb myminio/attendance-faces;
      /usr/bin/mc policy set public myminio/attendance-faces;
      /usr/bin/mc ilm add --expiry-days 90 myminio/attendance-faces;
      exit 0;
      "
    networks:
      - attendance-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: attendance-backend
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DATABASE_URL: jdbc:postgresql://postgres:5432/${DB_NAME:-attendance_db}
      DATABASE_USERNAME: ${DB_USER:-attendance_user}
      DATABASE_PASSWORD: ${DB_PASSWORD:-attendance_pass}
      MINIO_URL: http://minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin123}
      JWT_SECRET: ${JWT_SECRET:-mySecretKey123456789012345678901234567890}
      TIMEZONE: ${TIMEZONE:-Asia/Dhaka}
    ports:
      - "${BACKEND_PORT:-8080}:8080"
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      createbuckets:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    volumes:
      - ./scripts:/app/scripts
    networks:
      - attendance-network

  edge:
    build:
      context: ./edge
      dockerfile: Dockerfile
    container_name: attendance-edge
    environment:
      BACKEND_URL: http://backend:8080
      MINIO_URL: http://minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin123}
      RTSP_URL: ${RTSP_URL:-}
      DEVICE_ID: ${DEVICE_ID:-edge-001}
      DEVICE_LOCATION: ${DEVICE_LOCATION:-Main Entrance}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      EMBEDDING_DIM: ${EMBEDDING_DIM:-512}
      SIMILARITY_THRESHOLD: ${SIMILARITY_THRESHOLD:-0.6}
      LIVENESS_THRESHOLD: ${LIVENESS_THRESHOLD:-0.5}
      COOLDOWN_SECONDS: ${COOLDOWN_SECONDS:-30}
      SYNC_INTERVAL_SECONDS: ${SYNC_INTERVAL_SECONDS:-300}
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - ./edge/tests/assets:/app/assets
      - ./demo-images:/app/demo-images
    networks:
      - attendance-network
    # Uncomment for GPU support
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]

networks:
  attendance-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  minio_data:
    driver: local
